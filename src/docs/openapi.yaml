openapi: 3.0.0
info:
  title: Fitness Center API
  description: API для системы управления фитнес-центром
  version: 1.0.0
  contact:
    name: API Support
    email: support@fitnesscenter.com

servers:
  - url: http://localhost:3000/api
    description: Локальный сервер разработки

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: [client, trainer, admin]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Class:
      type: object
      properties:
        class_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        duration:
          type: integer
          description: Длительность в минутах
        capacity:
          type: integer
          description: Максимальное количество участников

    Schedule:
      type: object
      properties:
        schedule_id:
          type: string
          format: uuid
        class_id:
          type: string
          format: uuid
        trainer_id:
          type: string
          format: uuid
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time

    Booking:
      type: object
      properties:
        booking_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        schedule_id:
          type: string
          format: uuid
        booking_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, confirmed, cancelled]

    Subscription:
      type: object
      properties:
        subscription_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        plan_type:
          type: string
          enum: [basic, premium, vip]
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, expired, cancelled]

    Payment:
      type: object
      properties:
        payment_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        subscription_id:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        payment_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, completed, failed]

    Notification:
      type: object
      properties:
        notification_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        message:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time

paths:
  /users:
    post:
      summary: Регистрация нового пользователя
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - first_name
                - last_name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                first_name:
                  type: string
                last_name:
                  type: string
                phone:
                  type: string
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неверные данные
        '409':
          description: Email уже существует

    get:
      summary: Получить список пользователей
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [client, trainer, admin]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer

  /users/login:
    post:
      summary: Вход в систему
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Неверные учетные данные

  /classes:
    get:
      summary: Получить список классов
      tags: [Classes]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Список классов
          content:
            application/json:
              schema:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Class'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer

    post:
      summary: Создать новый класс
      tags: [Classes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '201':
          description: Класс успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'

  /schedules:
    get:
      summary: Получить расписание
      tags: [Schedules]
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
        - in: query
          name: end_date
          schema:
            type: string
            format: date
        - in: query
          name: class_id
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Расписание
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'

  /bookings:
    post:
      summary: Создать бронирование
      tags: [Bookings]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - schedule_id
              properties:
                schedule_id:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Бронирование создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'

    get:
      summary: Получить бронирования пользователя
      tags: [Bookings]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, confirmed, cancelled]
      responses:
        '200':
          description: Список бронирований
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'

  /subscriptions:
    post:
      summary: Создать подписку
      tags: [Subscriptions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - plan_type
              properties:
                plan_type:
                  type: string
                  enum: [basic, premium, vip]
      responses:
        '201':
          description: Подписка создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

  /payments:
    post:
      summary: Создать платеж
      tags: [Payments]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subscription_id
                - amount
              properties:
                subscription_id:
                  type: string
                  format: uuid
                amount:
                  type: number
                  format: float
      responses:
        '201':
          description: Платеж создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

  /notifications:
    get:
      summary: Получить уведомления пользователя
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: is_read
          schema:
            type: boolean
      responses:
        '200':
          description: Список уведомлений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

    patch:
      summary: Отметить уведомления как прочитанные
      tags: [Notifications]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - notification_ids
              properties:
                notification_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Уведомления обновлены 